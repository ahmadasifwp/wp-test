//
// Theme Variables
// --------------------------------------------------
@primary-color: #65bc7b;
@icon-font: "awb-icons";
@default-margin-bottom: 40px;
@default-background-color: #fff;
@default-border-color: #E9EAEE;
@default-border-radius: 5px;
@font-size-base: 13px;
@font-size-large: ceil((@font-size-base * 1.3)); // ~17px
@font-size-small: ceil((@font-size-base * 0.85)); // ~11px
@line-height-base: 20/13; // Computed "line-height" (`font-size` * `line-height`) for use with `margin`, `padding`, etc.
@line-height-computed: floor((@font-size-base * @line-height-base)); // ~20px
@zindex-popover: 2010;
@zindex-tooltip: 2030;
@zindex-modal-background: 2040;
@zindex-modal: 2050;
//Font Icons
@left-arrow-small: "\f104";
@right-arrow-small: "\f105";
@down-arrow-small: "\f107";
@left-arrow-large: "\e61e";
@right-arrow-large: "\e620";
@down-arrow-large: "\e61f";
@blog-timeline-arrow-left: "\f0da";
@blog-timeline-arrow-right: "\f0d9";
@slidingbar-plus: "\e61d";
@slidingbar-minus: "\e61c";
@twitter-widget: "\e605";
@to-top-arrow: "\f106";
@search-icon: "\f002";
@link-icon: "\e619";
@mobile-menu-icon: "\f0c9";
@cart-icon: "\f07a";
@details-icon: "\e623";
@options-icon: "\f013";
@star-icon: "\f005";
@star-o-icon: "\f006";
@woo-ok-icon: "\f05d";
@check-icon: "\f046";
@modal-screen-min: 900px;
//
// Mixins
// --------------------------------------------------
.clearfix() {
	&:after,
	&:before {
		content: " ";
		display: table;
	}

	&:after {
		clear: both;
	}
}


//
// Mixin
// --------------------------------------------------

// Animations
.animation(@animation) {
	animation: @animation;
}

// Gradients
#gradient {
	.striped(@color: rgba(255, 255, 255, .15); @angle: 45deg) {
		background-image: linear-gradient(@angle, @color 25%, transparent 25%, transparent 50%, @color 50%, @color 75%, transparent 75%, transparent);
	}
}

.transition-transform(@transition) {
	transition: transform @transition;
}

// Transformations
.translate(@x; @y) {
	transform: translate(@x, @y);
}

// Opacity
.opacity(@opacity) {
	opacity: @opacity;
}

//== Media queries breakpoints
//
//## Define the breakpoints at which your layout will change, adapting to different screen sizes.

// Extra small screen / phone
// Note: Deprecated @screen-xs and @screen-phone as of v3.0.1
@screen-xs: 480px;
@screen-xs-min: @screen-xs;
@screen-phone: @screen-xs-min;

/* stylelint-disable length-zero-no-unit */
// Small screen / tablet
// Note: Deprecated @screen-sm and @screen-tablet as of v3.0.1
@screen-sm: 0px;
@screen-sm-min: @screen-sm;
@screen-tablet: @screen-sm-min;
/* stylelint-enable length-zero-no-unit */

// Medium screen / desktop
// Note: Deprecated @screen-md and @screen-desktop as of v3.0.1
@screen-md: 992px;
@screen-md-min: @screen-md;
@screen-desktop: @screen-md-min;

// Large screen / wide desktop
// Note: Deprecated @screen-lg and @screen-lg-desktop as of v3.0.1
@screen-lg: 1200px;
@screen-lg-min: @screen-lg;
@screen-lg-desktop: @screen-lg-min;

// So media queries don't overlap when required, provide a maximum
@screen-xs-max: (@screen-sm-min - 1);
@screen-sm-max: (@screen-md-min - 1);
@screen-md-max: (@screen-lg-min - 1);

//== Container sizes
//
//## Define the maximum width of `.container` for different screen sizes.

// Small screen / tablet
@container-tablet: ((720px + @grid-gutter-width));
// For `@screen-sm-min` and up.
@container-sm: @container-tablet;

// Medium screen / desktop
@container-desktop: ((940px + @grid-gutter-width));
// For `@screen-md-min` and up.
@container-md: @container-desktop;

// Large screen / wide desktop
@container-large-desktop: ((1140px + @grid-gutter-width));
// For `@screen-lg-min` and up.
@container-lg: @container-large-desktop;

//== Grid system
//
//## Define your custom responsive grid.

// Number of columns in the grid.
@grid-columns: 12;
// Padding between columns. Gets divided in half for the left and right.
@grid-gutter-width: 30px;
// Navbar collapse
// Point at which the navbar becomes uncollapsed.
@grid-float-breakpoint: @screen-sm-min;
// Point at which the navbar begins collapsing.
@grid-float-breakpoint-max: (@grid-float-breakpoint - 1);

// Grid System
// -----------

// Centered container element
.container-fixed() {
	margin-right: auto;
	margin-left: auto;
	padding-left: (@grid-gutter-width / 2);
	padding-right: (@grid-gutter-width / 2);
	&:extend(.clearfix all);
}

// Creates a wrapper for a series of columns
.make-row(@gutter: @grid-gutter-width) {
	margin-left: (@gutter / -2);
	margin-right: (@gutter / -2);
	&:extend(.clearfix all);
}

// Generate the extra small columns
.make-xs-column(@columns; @gutter: @grid-gutter-width) {
	position: relative;
	float: left;
	width: percentage((@columns / @grid-columns));
	min-height: 1px;
	padding-left: (@gutter / 2);
	padding-right: (@gutter / 2);
}

.make-xs-column-offset(@columns) {

	@media (min-width: @screen-xs-min) {
		margin-left: percentage((@columns / @grid-columns));
	}
}

.make-xs-column-push(@columns) {

	@media (min-width: @screen-xs-min) {
		left: percentage((@columns / @grid-columns));
	}
}

.make-xs-column-pull(@columns) {

	@media (min-width: @screen-xs-min) {
		right: percentage((@columns / @grid-columns));
	}
}


// Generate the small columns
.make-sm-column(@columns; @gutter: @grid-gutter-width) {
	position: relative;
	min-height: 1px;
	padding-left: (@gutter / 2);
	padding-right: (@gutter / 2);

	@media (min-width: @screen-sm-min) {
		float: left;
		width: percentage((@columns / @grid-columns));
	}
}

.make-sm-column-offset(@columns) {

	@media (min-width: @screen-sm-min) {
		margin-left: percentage((@columns / @grid-columns));
	}
}

.make-sm-column-push(@columns) {

	@media (min-width: @screen-sm-min) {
		left: percentage((@columns / @grid-columns));
	}
}

.make-sm-column-pull(@columns) {

	@media (min-width: @screen-sm-min) {
		right: percentage((@columns / @grid-columns));
	}
}


// Generate the medium columns
.make-md-column(@columns; @gutter: @grid-gutter-width) {
	position: relative;
	min-height: 1px;
	padding-left: (@gutter / 2);
	padding-right: (@gutter / 2);

	@media (min-width: @screen-md-min) {
		float: left;
		width: percentage((@columns / @grid-columns));
	}
}

.make-md-column-offset(@columns) {

	@media (min-width: @screen-md-min) {
		margin-left: percentage((@columns / @grid-columns));
	}
}

.make-md-column-push(@columns) {

	@media (min-width: @screen-md-min) {
		left: percentage((@columns / @grid-columns));
	}
}

.make-md-column-pull(@columns) {

	@media (min-width: @screen-md-min) {
		right: percentage((@columns / @grid-columns));
	}
}


// Generate the large columns
.make-lg-column(@columns; @gutter: @grid-gutter-width) {
	position: relative;
	min-height: 1px;
	padding-left: (@gutter / 2);
	padding-right: (@gutter / 2);

	@media (min-width: @screen-lg-min) {
		float: left;
		width: percentage((@columns / @grid-columns));
	}
}

.make-lg-column-offset(@columns) {

	@media (min-width: @screen-lg-min) {
		margin-left: percentage((@columns / @grid-columns));
	}
}

.make-lg-column-push(@columns) {

	@media (min-width: @screen-lg-min) {
		left: percentage((@columns / @grid-columns));
	}
}

.make-lg-column-pull(@columns) {

	@media (min-width: @screen-lg-min) {
		right: percentage((@columns / @grid-columns));
	}
}


// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `@grid-columns`.

.make-grid-columns() {

	// Common styles for all sizes of grid columns, widths 1-12
	.col(@index) when (@index =1) {
		// initial
		@item: ~".col-xs-@{index}, .col-sm-@{index}, .col-md-@{index}, .col-lg-@{index}";
		.col((@index + 1), @item);
	}

	.col(@index, @list) when (@index =< @grid-columns) {
		// general; "=<" isn't a typo
		@item: ~".col-xs-@{index}, .col-sm-@{index}, .col-md-@{index}, .col-lg-@{index}";
		.col((@index + 1), ~"@{list}, @{item}");
	}

	.col(@index, @list) when (@index > @grid-columns) {

		// terminal
		@{list} {
			position: relative;
			// Prevent columns from collapsing when empty
			min-height: 1px;
			// Inner gutter via padding
			padding-left: (@grid-gutter-width / 2);
			padding-right: (@grid-gutter-width / 2);
		}
	}

	.col(1); // kickstart it
}

.make-grid-columns-float(@class) {
	.col(@index) when (@index =1) {
		// initial
		@item: ~".col-@{class}-@{index}";
		.col((@index + 1), @item);
	}

	.col(@index, @list) when (@index =< @grid-columns) {
		// general
		@item: ~".col-@{class}-@{index}";
		.col((@index + 1), ~"@{list}, @{item}");
	}

	.col(@index, @list) when (@index > @grid-columns) {

		// terminal
		@{list} {
			float: left;
		}
	}

	.col(1); // kickstart it
}

.calc-grid(@index, @class, @type) when (@type =width) and (@index > 0) {
	.col-@{class}-@{index} {
		width: percentage((@index / @grid-columns));
	}
}

.calc-grid(@index, @class, @type) when (@type =push) {
	.col-@{class}-push-@{index} {
		left: percentage((@index / @grid-columns));
	}
}

.calc-grid(@index, @class, @type) when (@type =pull) {
	.col-@{class}-pull-@{index} {
		right: percentage((@index / @grid-columns));
	}
}

.calc-grid(@index, @class, @type) when (@type =offset) {
	.col-@{class}-offset-@{index} {
		margin-left: percentage((@index / @grid-columns));
	}
}

// Basic looping in LESS
.make-grid(@index, @class, @type) when (@index >=0) {
	.calc-grid(@index, @class, @type);
	// next iteration
	.make-grid((@index - 1), @class, @type);
}

.button-dimensions(@dim-height, @dim-padding-horizontal, @dim-padding-vertical, @dim-line-height, @dim-font, @dim-3d-top) {
	padding: @dim-padding-vertical @dim-padding-horizontal;
	line-height: @dim-line-height;
	font-size: @dim-font;

	.fusion-button-text-left {
		display: inline-block;
		padding-left: @dim-padding-horizontal + 5;
	}

	.fusion-button-text-right {
		display: inline-block;
		padding-right: @dim-padding-horizontal + 5;
	}

	.button-icon-divider-left {
		padding: 0 (@dim-height - @dim-font) / 2;

		&.fusion-megamenu-image {
			padding: 0 (@dim-height - @dim-font) / 4;
		}
	}

	.button-icon-divider-right {
		padding: 0 (@dim-height - @dim-font) / 2;

		&.fusion-megamenu-image {
			padding: 0 (@dim-height - @dim-font) / 4;
		}
	}

	.button-icon-divider-left i,
	.button-icon-divider-left img,
	.button-icon-divider-right i,
	.button-icon-divider-right img {
		display: block;
	}
}

.button-colors(@grad-bottom-color, @grad-top-color, @border-color, @text-color) {
	background: @grad-top-color;
	background-image: linear-gradient(to top, @grad-bottom-color, @grad-top-color);
	border: 1px solid @border-color;
	color: @text-color;

	.button-icon-divider-left,
	.button-icon-divider-right {
		border-color: @border-color;
	}
}

.button-box-shadow(@shadow-arg-1, @shadow-arg-2, @shadow-arg-3) {
	box-shadow: @shadow-arg-1, @shadow-arg-2, @shadow-arg-3;
}

.button-3d-effect(@3d-highlight-color, @3d-color) {
	.button-box-shadow( inset 0 1px 0 @3d-highlight-color, 0 0.15em 0 @3d-color, 0.1em 0.2em 0.2em 0.15em rgba(0, 0, 0, 0.3) );
	&:active {
		.button-box-shadow( inset 0 1px 0 @3d-highlight-color, 0 1px 0 @3d-color, 0.05em 0.1em 0.1em 0.07em rgba(0, 0, 0, 0.3) );
	}
}
