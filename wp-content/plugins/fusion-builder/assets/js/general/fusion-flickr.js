( function( jQuery ) {

	'use strict';
    jQuery( '.fusion-flickr-element' ).each(  function() {
        getFlickrPhotos( this );
    } );

    function getFlickrPhotos( el, live ) {

        const id          = el.dataset.id,
              type        = el.dataset.type,
              album_id    = el.dataset.album_id,
              count       = el.dataset.count,
              api_key     = el.dataset.api_key,
              linkType    = el.dataset.link_type,
              linkTarget  = el.dataset.link_target,
              lazyMethod  = el.dataset.lazy,
              galleryId   = ( Math.random() + 1 ).toString( 36 ).substring( 7 );

        let url           = `https://api.flickr.com/services/rest/?format=json&method=flickr.photos.search&api_key=${api_key}&user_id=${id}&per_page=${count}&nojsoncallback=1`;
        if ( 'album' === type && album_id ) {
            url           = `https://api.flickr.com/services/rest/?format=json&method=flickr.photosets.getPhotos&api_key=${api_key}&photoset_id=${album_id}&user_id=${id}&per_page=${count}&nojsoncallback=1`;
        }

        //get column width
        const width       = el.offsetWidth,
              columns     = getComputedStyle( el ).gridTemplateColumns.split( ' ' ).length,
              columnWidth = parseInt( width / columns ),
              query       = '(-webkit-min-device-pixel-ratio: 2), (min-device-pixel-ratio: 2), (min-resolution: 192dpi)';

        jQuery.getJSON( url, function( rsp ) {
            if ( 'ok' != rsp.stat ) {
                // If this executes, something broke!
                return;
            }
            let imageSize = 's';

            switch ( true ) {
                case ( 75 <= columnWidth && 149 >= columnWidth ):
                    imageSize = 'q';
                    if ( matchMedia( query ).matches ) {
                       imageSize = 'm';
                    }
                break;
                case ( 150 <= columnWidth && 239 >= columnWidth ):
                    imageSize = 'm';
                    if ( matchMedia( query ).matches ) {
                        imageSize = 'n';
                     }
                break;
                case ( 240 <= columnWidth && 319 >= columnWidth ):
                    imageSize = 'n';
                    if ( matchMedia( query ).matches ) {
                        imageSize = 'w';
                     }
                break;
                case ( 320 <= columnWidth && 399 >= columnWidth ):
                    imageSize = 'w';
                    if ( matchMedia( query ).matches ) {
                        imageSize = 'z';
                     }
                break;
                case ( 400 <= columnWidth && 639 >= columnWidth ):
                    imageSize = 'z';
                    if ( matchMedia( query ).matches ) {
                        imageSize = 'c';
                     }
                break;
                case ( 640 <= columnWidth && 799 >= columnWidth ):
                    imageSize = 'c';
                    if ( matchMedia( query ).matches ) {
                        imageSize = 'b';
                     }
                break;
                case ( 800 <= columnWidth ):
                    imageSize = 'b';
                break;
            }

            if ( live ) {
                imageSize = 'c';
            }


            // Variable "s" is going to contain all the markup that is generated by the loop below.
            let s = '';

            // This loop runs through every item and creates HTML.
            let photos;
            if ( 'album' === type && album_id ) {
                photos = rsp.photoset.photo;
            } else {
                photos = rsp.photos.photo;
            }

            for ( let i = 0; i < photos.length; i++ ) {
                const photo = photos[ i ];
                let owner = photo.owner;
                let inAlbum = '';

                if ( 'album' === type && album_id ) {
                    owner = rsp.photoset.owner;
                    inAlbum = '/in/album-' + album_id;
                }

                // Notice that "t.jpg" is where you change the size of the image.
                const t_url = '//farm' + photo.farm +
                '.static.flickr.com/' + photo.server + '/' +
                photo.id + '_' + photo.secret + '_' + imageSize + '.jpg';

                let p_url = '//www.flickr.com/photos/' +
                owner + '/' + photo.id + inAlbum;

                // Lightbox.
                if ( 'lightbox' === linkType ) {
                    p_url = '//farm' + photo.farm +
                    '.static.flickr.com/' + photo.server + '/' +
                    photo.id + '_' + photo.secret + '_b.jpg';
                }

                const atts = [];
                if ( linkType ) {
                    atts.push( 'href="' + p_url + '"' );
                }
                atts.push( 'data-title="' + photo.title + '"' );
                if ( linkTarget ) {
                    atts.push( 'target="' + linkTarget + '"' );
                }

                // Lightbox.
                if ( 'lightbox' === linkType ) {
                    atts.push( 'data-rel="iLightbox[' + galleryId + ']"' );
                }
                // lazy loading.
                const imageAtts = [];
                let src = 'src="' + t_url + '"';
                const ImagePlaceHolder = `data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='${columnWidth}' height='auto' viewBox='0 0 ${columnWidth} auto'%3E%3Crect width='${columnWidth}' height='100%25' fill='%23ff0' fill-opacity='0'/%3E%3C/svg%3E`;

                imageAtts.push( 'alt="' + photo.title + '"' );

                if ( 'avada' === lazyMethod ) {
                    src = 'src="' + ImagePlaceHolder + '"';
                    imageAtts.push( 'data-orig-src="' + t_url + '"' );
                    imageAtts.push( 'class="lazyload"' );
                } else if ( 'wordpress' === lazyMethod ) {
                    imageAtts.push( 'loading="lazy"' );
                }

                imageAtts.push( src );
                s +=  '<div class="flickr-image"><a ' + atts.join( ' ' ) + '><img ' + imageAtts.join( ' ' ) + '/></a></div>';
            }
            el.innerHTML = '<div class="flickr-images">' + s + '</div>';
            if ( live && !window.fusionFlickrItems ) {
                window.fusionFlickrItems = s;
            }
            el.classList.remove( 'loading' );

            // Lightbox.
            if ( 'lightbox' === linkType ) {
               jQuery( el ).find( 'a' ).iLightBox( window.avadaLightBox.prepare_options( galleryId, false ) );
            }
        } );

    }

    jQuery( window ).on( 'load fusion-element-render-fusion_flickr', function( $, cid ) {
        const el = document.querySelector( `[data-cid="${cid}"] .fusion-flickr-element` );
        if ( el ) {
            getFlickrPhotos( el, true );
        }
    } );

}( jQuery ) );
